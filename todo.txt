
NEXT
Try to place metrics in classes, methods, comments, preprocessors etc
Try to turn errors and blocks into metrics
Turn block stats data in to metrics
Spit out block data in metrics only need identification open and close indices and if errored
Remove fluff from json file we don't need
Match record needs index start = index end as well as location

Need to search strings comments pre-processors etc separately but the adjustment must relate to the FullContent

Fork latest version of ApplicationInspector, make changes then build packages, then reference packages in Abacus


TESTS
	VERY IMPORTANT - Need to write tests to see that the expected block are children of the right blocks
	Write tests for operators in if statements etc ie x^y != z%3 ie !^&|^ etc
	test to see if protected internal and veriations is OK
	tests that test naming of methods classes etc
	TESTS MUST INCLUDE COUNTS - need to be sure the counts match a complex file and not missing or adding incorrect features.


DEVELOPMENT

Check can switch off storing text value in block with flag for groups and unmasks

Name project abacus
Reference Microsoft dlls from ApplicationInspector

Need to have basic regex bricks that can be built up into other patterns ie <parameters>, <returnValue>, <name> etc

Refactor everything so the are as few insertion points into the original code as possible and it is easy to extend to new languages
It should all come in a folder on its own and not interfer with other folders for other languages
It should only work for code for now
It should only require a single line change to the ApplicationInspector to upgrade it to Codemology
It should be callable from the command line. 
Maybe it should reference the applicationInspector projects but run as an independent exe?

Does regex account for attributes on methods classes etc use tests


Need to understand how the spat out json works with all this new stuff...
Quicker to do aggregation with sql.
json will give begin and end locations for everything including blocks


Need 
	to treat all blocks the same and produce the same metrics for all of them by summming up their containing blocks and their raw code.
	number units (of work) per line
	number blocks per block etc
	number lines per block
	comment line count per block, 
	blank line count per block, 
	number columns per line
	number of words (word boundaries) per line
	ratio of letters to words can mean long words or short words which is 
	comment chars versus code chars
	code lines versus code chars
	spaces versus code chars
	maximum number of code chars per line
	code block max depth
	number of sybling code blocks
	number methods and number properties per class record struct
	size of embedded strings
	statements per line
	ratio nested statements without brackets etc

Need metrics for per text container:
	http 
	https 
	log 
	logger 
	<form 
	<iframe etc
	.(){}<> => :;/%+* on the same line
	Nested blocks
		total number of nested blocks
		Max nested depth
		Average nested depth
		number of first level blocks

	Need to modify newlines to include all these:
    : '<Carriage return character (U+000D)>'
    | '<Line feed character (U+000A)>'
    | '<Carriage return character (U+000D) followed by line feed character (U+000A)>'
    | '<Next line character (U+0085)>'
    | '<Line separator character (U+2028)>'
    | '<Paragraph separator character (U+2029)>'



	Codemology Abacus

The Abacus structures a text file into blocks defined by the language specification.
It uses those blocks to generate metric points
It uses those blocks to define the position of external metrics points like keyword/classname etc searches
It allows drill down into the file and metrics to be built for file/class/method/loop/branch etc
Next steps is to spit out a json file, with file text and errors
Then import the json file to create sums etc of metric points into metrics
Then to run that against the .NET Core library